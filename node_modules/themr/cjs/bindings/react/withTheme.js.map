{"version":3,"sources":["bindings/react/withtheme.tsx"],"names":[],"mappings":"AAAA;;;;;;GAMG;;;;;;;;;;;;;;;AAEH,6BAA+B;AAE/B,iDAA8D;AAE9D,iCAAqC;AASrC,mBAIE,YAAoD,EACpD,eAAgD;IAEhD,MAAM,CAAC,UAAC,eAAwC;QAC9C,IAAM,QAAQ;gBAA2B,6BAA6B;gBAMpE,mBAAY,KAAa,EAAE,OAA0B;oBAArD,YACE,kBAAM,KAAK,EAAE,OAAO,CAAC,SAEtB;oBADC,KAAI,CAAC,KAAK,GAAG,YAAY,CAAC,YAAY,EAAE,eAAe,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;;gBAC3E,CAAC;gBAEM,6CAAyB,GAAhC,UAAiC,SAAiB;oBAChD,IAAI,CAAC,KAAK,GAAG,YAAY,CAAC,YAAY,EAAE,eAAe,EAAE,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;gBACpF,CAAC;gBAEM,0BAAM,GAAb;oBACE,MAAM,CAAC,oBAAC,eAAe,eAAK,IAAI,CAAC,KAAK,IAAE,KAAK,EAAE,IAAI,CAAC,KAAK,IAAI,CAAC;gBAChE,CAAC;gBACH,gBAAC;YAAD,CAlBiB,AAkBhB,CAlBwC,KAAK,CAAC,SAAS;YACxC,eAAY,GAAQ,6BAAa,CAAC,iBAAkB;eAiBnE,CAAC;QAEF,MAAM,CAAC,QAAQ,CAAC;;IAClB,CAAC,CAAC;AACJ,CAAC;AA9BD,8BA8BC;AAED,sBACE,YAAyC,EACzC,eAAoC,EACpC,KAAsB,EACtB,OAA0B;IAEpB,IAAA,mBAAsC,EAApC,cAAI,EAAE,4BAAW,CAAoB;IAC7C,IAAM,WAAW,GAAG,KAAK,CAAC,KAAK,CAAC;IAChC,IAAM,UAAU,GAAG,eAAe,GAAG,eAAe,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;IACjE,IAAM,WAAW,GAAG,YAAY,CAAC,WAAW,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;IAChE,MAAM,CAAC,WAAW,GAAG,kBAAU,CAAC,WAAW,EAAE,WAAW,CAAC,GAAG,WAAW,CAAC;AAC1E,CAAC","file":"withtheme.js","sourcesContent":["/**\n * @license\n * Copyright (C) 2016 Chi Vinh Le and contributors.\n *\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport * as React from \"react\";\n\nimport { ThemrProvider, ThemrContext } from \"./themrprovider\";\nimport { ThemeFactory, Transformer } from \"../../index\";\nimport { mergeTheme } from \"./utils\";\n\nexport type DecoratorTarget<TProps> = React.StatelessComponent<TProps> | React.ComponentClass<TProps>;\nexport type Decorator<TInner, TOuter> = (target: DecoratorTarget<TInner>) => React.ComponentClass<TOuter>;\n\nexport interface ThemeAttributes<TTheme> {\n  theme?: TTheme;\n}\n\nexport function withTheme<\n  TProps extends { theme?: TTheme },\n  TTheme,\n  TThemeProps>(\n  themeFactory: ThemeFactory<TTheme, TThemeProps, any>,\n  mapPropsToTheme?: (props: TProps) => TThemeProps,\n): Decorator<TProps, TProps> {\n  return (TargetComponent: DecoratorTarget<TProps>) => {\n    const enhanced = class WithTheme extends React.Component<TProps, void> {\n      public static contextTypes: any = ThemrProvider.childContextTypes;\n\n      public context: ThemrContext<any>;\n      private theme: any;\n\n      constructor(props: TProps, context: ThemrContext<any>) {\n        super(props, context);\n        this.theme = computeTheme(themeFactory, mapPropsToTheme, props, context);\n      }\n\n      public componentWillReceiveProps(nextProps: TProps): void {\n        this.theme = computeTheme(themeFactory, mapPropsToTheme, nextProps, this.context);\n      }\n\n      public render(): React.ReactElement<any> {\n        return <TargetComponent {...this.props} theme={this.theme} />;\n      }\n    };\n\n    return enhanced;\n  };\n}\n\nfunction computeTheme(\n  themeFactory: ThemeFactory<any, any, any>,\n  mapPropsToTheme: (props: any) => any,\n  props: { theme?: any },\n  context: ThemrContext<any>,\n) {\n  const { vars, transformer } = context.themer;\n  const customTheme = props.theme;\n  const themeProps = mapPropsToTheme ? mapPropsToTheme(props) : {};\n  const transformed = themeFactory(transformer, themeProps, vars);\n  return customTheme ? mergeTheme(transformed, customTheme) : transformed;\n}\n"]}