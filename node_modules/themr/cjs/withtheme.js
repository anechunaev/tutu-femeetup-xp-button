/**
 * @license
 * Copyright (C) 2016 Chi Vinh Le and contributors.
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file for details.
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var React = require("react");
var objectAssign = require("object-assign");
var deepExtend = require("deep-extend");
var themecontextprovider_1 = require("./themecontextprovider");
function removeThemeAttributes(attributes) {
    delete attributes.theme;
}
exports.removeThemeAttributes = removeThemeAttributes;
function mergeTheme(a, b) {
    var theme = objectAssign({}, a);
    var customTheme = objectAssign({}, b);
    delete customTheme.classes;
    deepExtend(theme, customTheme);
    // classes get appended instead of overwritten.
    var classes = b.classes;
    if (classes) {
        for (var key in classes) {
            if (theme.classes[key] === undefined) {
                theme.classes[key] = classes[key];
                continue;
            }
            theme.classes[key] += " " + classes[key];
        }
    }
    return theme;
}
function withTheme(themeFactory) {
    return function (TargetComponent) {
        var enhanced = (function (_super) {
            __extends(WithTheme, _super);
            function WithTheme(props) {
                _super.call(this, props);
            }
            WithTheme.prototype.componentWillMount = function () {
                var vars = this.context.themeVars;
                var jss = this.context.jss;
                if (!jss) {
                    return;
                }
                var customTheme = this.props.theme;
                var theme = themeFactory(vars, jss);
                this.theme = theme;
                this.computedTheme = customTheme ? mergeTheme(theme, customTheme) : theme;
            };
            WithTheme.prototype.componentWillReceiveProps = function (nextProps) {
                if (this.props.theme !== nextProps.theme) {
                    var customTheme = nextProps.theme;
                    this.computedTheme = customTheme ? mergeTheme(this.theme, customTheme) : this.theme;
                }
            };
            WithTheme.prototype.render = function () {
                return React.createElement(TargetComponent, __assign({}, this.props, {theme: this.computedTheme}));
            };
            WithTheme.contextTypes = themecontextprovider_1.ThemeContextProvider.childContextTypes;
            return WithTheme;
        }(React.Component));
        return enhanced;
    };
}
exports.withTheme = withTheme;

//# sourceMappingURL=withtheme.js.map
