{"version":3,"sources":["transformer.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAYH;IAAkC,iBAAoB;SAApB,UAAoB,EAApB,qBAAoB,EAApB,IAAoB;QAApB,4BAAoB;;IACpD,qBAAqB;IACrB,IAAM,aAAa,GAAgC,EAAE,CAAC;IACtD,IAAM,OAAO,GAA0B,EAAE,CAAC;IAC1C,MAAM,CAAC,UAAC,KAA2B,EAAE,OAAY,EAAE,KAAU,EAAE,IAAS;QAAnC,wBAAA,EAAA,YAAY;QAAE,sBAAA,EAAA,UAAU;QAAE,qBAAA,EAAA,SAAS;QACtE,IAAI,EAAE,GAAG,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACtC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;YAAC,EAAE,GAAG,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAAC,CAAC;QAC/C,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAAC,OAAO,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC;QAAC,CAAC;QACvC,IAAM,IAAI,GAAS;YACjB,EAAE,IAAA,EAAE,OAAO,SAAA;YACX,KAAK,OAAA;YACL,IAAI,MAAA;YACJ,KAAK,EAAE,KAAK,GAAG,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,EAAE;YACtC,OAAO,EAAE,OAAO,CAAC,EAAE,CAAC;SACrB,CAAC;QACF,OAAO,CAAC,OAAO,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,IAAI,CAAC,EAAP,CAAO,CAAC,CAAC;QAChC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;YAAC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,EAAE,CAAC;QAAC,CAAC;QACnD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;YAAC,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,EAAE,CAAC;QAAC,CAAC;QACrD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;YAAC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,EAAE,CAAC;QAAC,CAAC;QACnD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC,CAAC;AACJ,CAAC;AArBD,8CAqBC","file":"transformer.js","sourcesContent":["/**\n * @license\n * Copyright (C) 2016 Chi Vinh Le and contributors.\n *\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport { Task, Plugin } from \"./plugin\";\n\nexport type Rules<TProps, TTheme, TVars> = (props?: TProps, vars?: TVars) => TTheme;\nexport type Transformer = (rules: Rules<any, any, any>, options?: Options, props?: any, vars?: any) => any;\nexport type Options = {\n  name?: string;\n  index?: number;\n  global?: boolean;\n};\n\nexport function createTransformer(...plugins: Plugin[]): Transformer {\n  // TODO: Use WeakMap.\n  const rulesRegistry: Array<Rules<any, any, any>> = [];\n  const runtime: { [id: number]: any } = {};\n  return (rules: Rules<any, any, any>, options = {}, props = {}, vars = {}) => {\n    let id = rulesRegistry.indexOf(rules);\n    if (id < 0) { id = rulesRegistry.push(rules); }\n    if (!runtime[id]) { runtime[id] = {}; }\n    const task: Task = {\n      id, options,\n      props,\n      vars,\n      rules: rules ? rules(props, vars) : {},\n      runtime: runtime[id],\n    };\n    plugins.forEach((t) => t(task));\n    if (!task.rules.styles) { task.rules.styles = {}; }\n    if (!task.rules.classes) { task.rules.classes = {}; }\n    if (!task.rules.themes) { task.rules.themes = {}; }\n    return task.rules;\n  };\n}\n"]}