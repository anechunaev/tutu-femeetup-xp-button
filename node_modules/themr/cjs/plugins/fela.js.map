{"version":3,"sources":["plugins/fela.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAEH,yDAA2D;AAC3D,6BAAgD;AAKhD,IAAM,EAAE,GAAG,MAAM,CAAC;AAUlB,IAAM,QAAQ,GAAwB,cAAM,OAAA,CAAC;IAC3C,QAAQ,EAAE,qBAAc,EAAE;CAC3B,CAAC,EAF0C,CAE1C,CAAC;AAEH,IAAM,MAAM,GAAiC,UAAC,aAA0B;IAA1B,8BAAA,EAAA,gBAAgB,QAAQ,EAAE;IACtE,OAAA,UAAC,EAA2B;YAAlB,0BAAO,EAAG,oBAAO;QACzB,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YAAC,MAAM,CAAC;QAAC,CAAC;QACzB,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAAC,OAAO,CAAC,EAAE,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE,EAAa,CAAC;QAAC,CAAC;QAC7D,IAAM,WAAW,GAAY,OAAO,CAAC,EAAE,CAAC,CAAC;QAClC,IAAA,iCAAQ,CAAkB;gCAEtB,MAAI;YACb,IAAM,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,MAAI,CAAC,CAAC,CAAC,CAAC;YACvD,IAAI,UAAU,GAAG,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACzC,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;gBAChB,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAC,cAAM,OAAA,OAAO,CAAC,MAAI,CAAC,EAAb,CAAa,CAAC,CAAC;gBACtD,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC;YACvC,CAAC;YACD,OAAO,CAAC,MAAI,CAAC,GAAG,UAAU,CAAC;QAC7B,CAAC;QARD,GAAG,CAAC,CAAC,IAAM,MAAI,IAAI,OAAO,CAAC;oBAAhB,MAAI;SAQd;IACH,CAAC;AAfD,CAeC,CAAC;;AAEJ,kBAAe,MAAM,CAAC","file":"fela.js","sourcesContent":["/**\n * @license\n * Copyright (C) 2016 Chi Vinh Le and contributors.\n *\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport * as createHash from \"murmurhash-js/murmurhash3_gc\";\nimport { Renderer, createRenderer } from \"fela\";\n\nimport { PluginFactory, Task } from \"../plugin\";\nimport { resolveCallback } from \"../utils\";\n\nconst ns = \"fela\";\n\ntype Runtime = {\n  cache: { [hash: number]: string };\n};\n\nexport type PluginOptions = {\n  renderer?: Renderer;\n};\n\nconst defaults: () => PluginOptions = () => ({\n  renderer: createRenderer(),\n});\n\nconst plugin: PluginFactory<PluginOptions> = (pluginOptions = defaults()) =>\n  ({rules: {classes}, runtime}) => {\n    if (!classes) { return; }\n    if (!runtime[ns]) { runtime[ns] = { cache: {} } as Runtime; }\n    const felaRuntime: Runtime = runtime[ns];\n    const {renderer} = pluginOptions;\n\n    for (const name in classes) {\n      const hash = createHash(JSON.stringify(classes[name]));\n      let classNames = felaRuntime.cache[hash];\n      if (!classNames) {\n        classNames = renderer.renderRule(() => classes[name]);\n        felaRuntime.cache[hash] = classNames;\n      }\n      classes[name] = classNames;\n    }\n  };\n\nexport default plugin;\n"]}