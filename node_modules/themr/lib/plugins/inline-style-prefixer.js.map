{"version":3,"sources":["plugins/inline-style-prefixer.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,KAAK,UAAU,MAAM,8BAA8B,CAAC;AAC3D,OAAO,KAAK,QAAQ,MAAM,uBAAuB,CAAC;AAIlD,IAAM,EAAE,GAAG,uBAAuB,CAAC;AAUnC,IAAM,QAAQ,GAAwB,cAAM,OAAA,CAAC;IAC3C,QAAQ,EAAE,IAAI,QAAQ,EAAE;CACzB,CAAC,EAF0C,CAE1C,CAAC;AAEH,IAAM,MAAM,GAAiC,UAAC,aAA0B;IAA1B,8BAAA,EAAA,gBAAgB,QAAQ,EAAE;IACtE,OAAA,UAAC,EAA0B;YAAjB,wBAAM,EAAG,oBAAO;QACxB,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAAC,OAAO,CAAC,EAAE,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE,EAAa,CAAC;QAAC,CAAC;QAC7D,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YAAC,MAAM,CAAC;QAAC,CAAC;QACxB,IAAM,UAAU,GAAY,OAAO,CAAC,EAAE,CAAC,CAAC;QAChC,IAAA,iCAAQ,CAAmB;QACnC,GAAG,CAAC,CAAC,IAAM,MAAI,IAAI,MAAM,CAAC,CAAC,CAAC;YAC1B,IAAM,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,MAAI,CAAC,CAAC,CAAC,CAAC;YACtD,IAAI,QAAQ,GAAG,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACtC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACd,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,MAAI,CAAC,CAAC,CAAC;gBACzC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC;YACpC,CAAC;YACD,MAAM,CAAC,MAAI,CAAC,GAAG,QAAQ,CAAC;QAC1B,CAAC;IACH,CAAC;AAdD,CAcC,CAAC;AAEJ,eAAe,MAAM,CAAC","file":"inline-style-prefixer.js","sourcesContent":["/**\n * @license\n * Copyright (C) 2016 Chi Vinh Le and contributors.\n *\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport * as createHash from \"murmurhash-js/murmurhash3_gc\";\nimport * as Prefixer from \"inline-style-prefixer\";\n\nimport { PluginFactory, Task } from \"../plugin\";\n\nconst ns = \"inline-style-prefixer\";\n\ntype Runtime = {\n  cache: { [hash: number]: any };\n};\n\nexport type PluginOptions = {\n  prefixer?: any,\n};\n\nconst defaults: () => PluginOptions = () => ({\n  prefixer: new Prefixer(),\n});\n\nconst plugin: PluginFactory<PluginOptions> = (pluginOptions = defaults()) =>\n  ({rules: {styles}, runtime}) => {\n    if (!runtime[ns]) { runtime[ns] = { cache: {} } as Runtime; }\n    if (!styles) { return; }\n    const pfxRuntime: Runtime = runtime[ns];\n    const { prefixer } = pluginOptions;\n    for (const name in styles) {\n      const hash = createHash(JSON.stringify(styles[name]));\n      let prefixed = pfxRuntime.cache[hash];\n      if (!prefixed) {\n        prefixed = prefixer.prefix(styles[name]);\n        pfxRuntime.cache[hash] = prefixed;\n      }\n      styles[name] = prefixed;\n    }\n  };\n\nexport default plugin;\n"]}