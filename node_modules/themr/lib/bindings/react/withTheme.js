/**
 * @license
 * Copyright (C) 2016 Chi Vinh Le and contributors.
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file for details.
 */
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import * as React from "react";
import { ThemrProvider } from "./themrprovider";
import { mergeTheme } from "./utils";
export function withTheme(themeFactory, mapPropsToTheme) {
    return function (TargetComponent) {
        var enhanced = (_a = (function (_super) {
                __extends(WithTheme, _super);
                function WithTheme(props, context) {
                    var _this = _super.call(this, props, context) || this;
                    _this.theme = computeTheme(themeFactory, mapPropsToTheme, props, context);
                    return _this;
                }
                WithTheme.prototype.componentWillReceiveProps = function (nextProps) {
                    this.theme = computeTheme(themeFactory, mapPropsToTheme, nextProps, this.context);
                };
                WithTheme.prototype.render = function () {
                    return React.createElement(TargetComponent, __assign({}, this.props, { theme: this.theme }));
                };
                return WithTheme;
            }(React.Component)),
            _a.contextTypes = ThemrProvider.childContextTypes,
            _a);
        return enhanced;
        var _a;
    };
}
function computeTheme(themeFactory, mapPropsToTheme, props, context) {
    var _a = context.themer, vars = _a.vars, transformer = _a.transformer;
    var customTheme = props.theme;
    var themeProps = mapPropsToTheme ? mapPropsToTheme(props) : {};
    var transformed = themeFactory(transformer, themeProps, vars);
    return customTheme ? mergeTheme(transformed, customTheme) : transformed;
}

//# sourceMappingURL=withtheme.js.map
