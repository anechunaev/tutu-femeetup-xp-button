{"version":3,"sources":["withtheme.tsx"],"names":[],"mappings":"AAAA;;;;;;GAMG;;;;;;;;;;;;;;OAEI,KAAK,KAAK,MAAM,OAAO;OACvB,KAAK,YAAY,MAAM,eAAe;OACtC,KAAK,UAAU,MAAM,aAAa;OAElC,EAAgB,oBAAoB,EAAE,MAAM,wBAAwB;AAS3E,sCAAsC,UAAgC;IACpE,OAAO,UAAU,CAAC,KAAK,CAAC;AAC1B,CAAC;AAED,oBAAoB,CAAM,EAAE,CAAM;IAChC,IAAM,KAAK,GAAG,YAAY,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IAClC,IAAM,WAAW,GAAG,YAAY,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IACxC,OAAO,WAAW,CAAC,OAAO,CAAC;IAC3B,UAAU,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;IAE/B,+CAA+C;IAC/C,IAAM,OAAO,GAAoC,CAAC,CAAC,OAAO,CAAC;IAC3D,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;QACZ,GAAG,CAAC,CAAC,IAAM,GAAG,IAAI,OAAO,CAAC,CAAC,CAAC;YAC1B,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,SAAS,CAAC,CAAC,CAAC;gBACrC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;gBAClC,QAAQ,CAAC;YACX,CAAC;YACD,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;QAC3C,CAAC;IACH,CAAC;IACD,MAAM,CAAC,KAAK,CAAC;AACf,CAAC;AAED,0BACE,YAAoC;IACpC,MAAM,CAAC,UAAC,eAA6C;QACnD,IAAM,QAAQ,GAAG;YAAwB,6BAA6B;YAOpE,mBAAY,KAAa;gBACvB,kBAAM,KAAK,CAAC,CAAC;YACf,CAAC;YAEM,sCAAkB,GAAzB;gBACE,IAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;gBAC5B,0BAAG,CAAkB;gBAC7B,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACT,MAAM,CAAC;gBACT,CAAC;gBACD,IAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;gBACrC,IAAM,KAAK,GAAG,YAAY,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;gBACtC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;gBACnB,IAAI,CAAC,aAAa,GAAG,WAAW,GAAG,UAAU,CAAC,KAAK,EAAE,WAAW,CAAC,GAAG,KAAK,CAAC;YAC5E,CAAC;YAEM,6CAAyB,GAAhC,UAAiC,SAAiB;gBAChD,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,KAAK,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;oBACzC,IAAM,WAAW,GAAG,SAAS,CAAC,KAAK,CAAC;oBACpC,IAAI,CAAC,aAAa,GAAG,WAAW,GAAG,UAAU,CAAC,IAAI,CAAC,KAAK,EAAE,WAAW,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC;gBACtF,CAAC;YACH,CAAC;YAEM,0BAAM,GAAb;gBACE,MAAM,CAAC,oBAAC,eAAe,eAAK,IAAI,CAAC,KAAK,GAAE,KAAK,EAAE,IAAI,CAAC,aAAc,GAAG,CAAC;YACxE,CAAC;YA/Ba,sBAAY,GAAQ,oBAAoB,CAAC,iBAAiB,CAAC;YAgC3E,gBAAC;QAAD,CAjCiB,AAiChB,CAjCwC,KAAK,CAAC,SAAS,EAiCvD,CAAC;QAEF,MAAM,CAAC,QAAQ,CAAC;IAClB,CAAC,CAAC;AACJ,CAAC","file":"withtheme.js","sourcesContent":["/**\n * @license\n * Copyright (C) 2016 Chi Vinh Le and contributors.\n *\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport * as React from \"react\";\nimport * as objectAssign from \"object-assign\";\nimport * as deepExtend from \"deep-extend\";\nimport { ThemeFactory } from \"./themefactory\";\nimport { ThemeContext, ThemeContextProvider } from \"./themecontextprovider\";\n\nexport type Decorator<TProps> = (target: React.ComponentClass<TProps> | React.StatelessComponent<TProps>) =>\n  React.ComponentClass<TProps>;\n\nexport interface ThemeAttributes<TTheme> {\n  theme?: TTheme;\n}\n\nexport function removeThemeAttributes(attributes: ThemeAttributes<any>): void {\n  delete attributes.theme;\n}\n\nfunction mergeTheme(a: any, b: any): any {\n  const theme = objectAssign({}, a);\n  const customTheme = objectAssign({}, b);\n  delete customTheme.classes;\n  deepExtend(theme, customTheme);\n\n  // classes get appended instead of overwritten.\n  const classes: { [className: string]: string } = b.classes;\n  if (classes) {\n    for (const key in classes) {\n      if (theme.classes[key] === undefined) {\n        theme.classes[key] = classes[key];\n        continue;\n      }\n      theme.classes[key] += \" \" + classes[key];\n    }\n  }\n  return theme;\n}\n\nexport function withTheme<TProps extends ThemeAttributes<any>>(\n  themeFactory: ThemeFactory<any, any>): Decorator<TProps> {\n  return (TargetComponent: React.ComponentClass<TProps>) => {\n    const enhanced = class WithTheme extends React.Component<TProps, void> {\n      public static contextTypes: any = ThemeContextProvider.childContextTypes;\n\n      public context: ThemeContext<any>;\n      private theme: any;\n      private computedTheme: any;\n\n      constructor(props: TProps) {\n        super(props);\n      }\n\n      public componentWillMount(): void {\n        const vars = this.context.themeVars;\n        const { jss } = this.context;\n        if (!jss) {\n          return;\n        }\n        const customTheme = this.props.theme;\n        const theme = themeFactory(vars, jss);\n        this.theme = theme;\n        this.computedTheme = customTheme ? mergeTheme(theme, customTheme) : theme;\n      }\n\n      public componentWillReceiveProps(nextProps: TProps): void {\n        if (this.props.theme !== nextProps.theme) {\n          const customTheme = nextProps.theme;\n          this.computedTheme = customTheme ? mergeTheme(this.theme, customTheme) : this.theme;\n        }\n      }\n\n      public render(): React.ReactElement<any> {\n        return <TargetComponent {...this.props} theme={this.computedTheme} />;\n      }\n    };\n\n    return enhanced;\n  };\n}\n"]}